/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package decisiontree;

import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author khaidzir
 */
public class DTFrame extends javax.swing.JFrame {

    Data data, testData;
    DecisionTree dt;
    TreeJPanel treePanel;
    String dataInfo, testDataInfo;
    boolean isTrained;
    
    /**
     * Creates new form DTFrame
     */
    public DTFrame() {
        initComponents();
        treePanel = new TreeJPanel();
        jScrollPane1.setViewportView(treePanel);
        isTrained = false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        trainButton = new javax.swing.JButton();
        testButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        dataInfoTextArea = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        testDataInfoTA = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Decision Tree");
        setResizable(false);

        trainButton.setText("Train");
        trainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainButtonActionPerformed(evt);
            }
        });

        testButton.setText("Test");
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });

        dataInfoTextArea.setEditable(false);
        dataInfoTextArea.setColumns(20);
        dataInfoTextArea.setRows(5);
        jScrollPane3.setViewportView(dataInfoTextArea);

        testDataInfoTA.setEditable(false);
        testDataInfoTA.setColumns(20);
        testDataInfoTA.setRows(5);
        jScrollPane4.setViewportView(testDataInfoTA);

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane5.setViewportView(logTextArea);

        jMenu1.setText("File");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem1.setText("Open arff (train)");
        jMenuItem1.setToolTipText("");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Open arff (test)");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(trainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(testButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane5))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(trainButton)
                            .addComponent(testButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        testButton.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("arff File", "arff"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            data = new Data();
            int code = ARFFLoader.readARFF(selectedFile.getAbsolutePath(), data, true);
            if (code == ARFFLoader.WRONG_FORMAT) {
                JOptionPane.showMessageDialog(this, "Terdapat kesalahan pada format file");
                data = null;
                return;
            } else if (code == ARFFLoader.DATA_ERROR) {
                JOptionPane.showMessageDialog(this, "Terdapat kesalahan pada data");
                data = null;
                return;
            }
            StringBuilder sb = new StringBuilder();
            sb.append("FILE : ").append(selectedFile.getName()).append("\n");
            sb.append("RELATION NAME : ").append(data.relationName).append("\n");
            sb.append("ATTRIBUTES :\n");
            int i;
            for(i=0; i<data.attributeNames.size()-1; i++) {
                sb.append("- ").append(data.attributeNames.get(i)).append(" : {");
                int j;
                for(j=0; j<data.attributeValues.get(i).size()-1; j++) {
                    sb.append(data.attributeValues.get(i).get(j)).append(", ");
                }
                sb.append(data.attributeValues.get(i).get(j)).append("}\n");
            }
            sb.append("CLASS :\n");
            sb.append("- ").append(data.attributeNames.get(i)).append(" : {");
            int j;
            for(j=0; j<data.attributeValues.get(i).size()-1; j++) {
                sb.append(data.attributeValues.get(i).get(j)).append(", ");
            }
            sb.append(data.attributeValues.get(i).get(j)).append("}\n");
            dataInfo = sb.toString();
            dataInfoTextArea.setText(dataInfo);
            isTrained = false;
            testData = null;
            testDataInfo = "";
            testDataInfoTA.setText("");
            logTextArea.setText("");
            treePanel.setTree(null);
            treePanel.reset();
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void trainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainButtonActionPerformed
        // TODO add your handling code here:
        if (data != null) {
            double time = System.nanoTime();
            dt = new DecisionTree();
            dt.train(data);
            time = System.nanoTime()-time;            
            treePanel.setTree(dt.root);
            treePanel.reset();
            StringBuilder sb = new StringBuilder();
            sb.append(dt.log);
            sb.append("\nWaktu eksekusi : ").append(time/1000000).append(" ms\n");
            logTextArea.setText(sb.toString());
            isTrained = true;
        }
    }//GEN-LAST:event_trainButtonActionPerformed

    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        // TODO add your handling code here:
        double time = System.nanoTime();
        if (testData == null) {
//            JOptionPane.showMessageDialog(this, "Belum ada data latih atau model belum dibentuk");
            return;
        }        
        double acc = 0.0;
        int classIdx = testData.instances.get(0).attribute.size()-1;
        StringBuilder sb = new StringBuilder();
        sb.append(testDataInfo);
        for(Instance ins : testData.instances) {
            int i;
            sb.append("<");
            for(i=0; i<ins.attribute.size()-2; i++) {
                sb.append(testData.attributeNames.get(i)).append("=");
                sb.append(ins.attribute.get(i)).append(", ");
            }
            sb.append(testData.attributeNames.get(i)).append("=");
            sb.append(ins.attribute.get(i)).append("> -> ");
            String res = dt.test(ins);
            sb.append(res);
            if (!testData.isUnknownClass) {
                sb.append(" (Ref : ").append(ins.attribute.get(classIdx)).append(")");
                if (res.equals(ins.attribute.get(classIdx))) acc+=1.0;
            }
            sb.append("\n");
        }
        if (!testData.isUnknownClass) {
            sb.append("\nAkurasi = ").append((acc*100)/testData.instances.size()).append("%");
        }
        time = System.nanoTime()-time;
        sb.append("\nWaktu eksekusi : ").append(time*1.0/1000000).append(" ms\n");
        testDataInfo = sb.toString();
        testDataInfoTA.setText(testDataInfo);
    }//GEN-LAST:event_testButtonActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        if (data == null || !isTrained) {
            JOptionPane.showMessageDialog(this, "Belum ada data latih atau model belum dibentuk");
            return;
        }        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("arff File", "arff"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            testData = new Data();
            int code = ARFFLoader.readARFF(selectedFile.getAbsolutePath(), testData, false);
            if (code == ARFFLoader.WRONG_FORMAT) {
                JOptionPane.showMessageDialog(this, "Terdapat kesalahan pada format file");
                testData = null;
                testDataInfo = "";
                testDataInfoTA.setText("");
                return;
            } else if (code == ARFFLoader.DATA_ERROR) {
                JOptionPane.showMessageDialog(this, "Terdapat kesalahan pada data");
                testData = null;
                testDataInfo = "";
                testDataInfoTA.setText("");
                return;
            } else {
                if (!compareData()) {
                    JOptionPane.showMessageDialog(this, "Format test data berbeda dengan train data");
                    testData = null;
                    testDataInfo = "";
                    testDataInfoTA.setText("");
                    return;
                }
            }
            StringBuilder sb = new StringBuilder();
            sb.append("TEST DATA\n");
            sb.append("FILE : ").append(selectedFile.getName()).append("\n");
            testDataInfo = sb.toString();
            testDataInfoTA.setText(testDataInfo);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private boolean compareData() {
        // Cek nama relation
        if (!data.relationName.equals(testData.relationName)) {
            return false;
        }
        
        // Cek nama atribut
        if (data.attributeNames.size() != testData.attributeNames.size()) {
            return false;
        }
        for(int i=0; i<data.attributeNames.size(); i++) {
            if (!data.attributeNames.get(i).equals(testData.attributeNames.get(i))) {
                return false;
            }
        }
        
        // Cek nilai-nilai atribut
        for(int i=0; i<data.attributeValues.size(); i++) {
            ArrayList<String> arrD = data.attributeValues.get(i);
            ArrayList<String> arrT = testData.attributeValues.get(i);
            if (arrD.size() != arrT.size()) {
                return false;
            }
            for(int j=0; j<arrD.size(); j++) {
                if (!arrD.get(j).equals(arrT.get(j))) {
                    return false;
                }
            }
        }
        
        return true;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DTFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DTFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DTFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DTFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DTFrame dtFrame = new DTFrame();
                dtFrame.pack();
                dtFrame.setLocationRelativeTo(null);
                dtFrame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea dataInfoTextArea;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton testButton;
    private javax.swing.JTextArea testDataInfoTA;
    private javax.swing.JButton trainButton;
    // End of variables declaration//GEN-END:variables
}
